{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lior/FInal_PRO Intel/IntelProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Module } from 'src/app/Models/Module';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/ModuleService\";\nlet ModulesComponent = class ModulesComponent {\n  constructor(Service_Mod) {\n    this.Service_Mod = Service_Mod;\n    this.Allmodules = [];\n    this.modules = [];\n  }\n\n  ngOnInit() {\n    this.GetAllModulesDistnict();\n    console.log(this.modules);\n  }\n\n  GetAllModulesDistnict() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let count;\n\n      try {\n        _this.Allmodules = yield _this.Service_Mod.GetDataModelperMod();\n\n        _this.Allmodules.map(x => {\n          count = 0;\n\n          _this.modules.map(y => {\n            if (x.module == y.module) {\n              count++;\n            }\n          });\n\n          if (count == 0) _this.modules.push(new Module(x.module));\n        });\n      } catch (err) {\n        alert(err.message);\n      }\n    })();\n  }\n\n};\n\nModulesComponent.ɵfac = function ModulesComponent_Factory(t) {\n  return new (t || ModulesComponent)(i0.ɵɵdirectiveInject(i1.ModuleService));\n};\n\nModulesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ModulesComponent,\n  selectors: [[\"app-modules\"]],\n  decls: 2,\n  vars: 0,\n  template: function ModulesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"modules works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtb2R1bGVzLmNvbXBvbmVudC5jc3MifQ== */\"]\n});\nModulesComponent = __decorate([Injectable({\n  providedIn: 'root'\n})], ModulesComponent);\nexport { ModulesComponent };","map":{"version":3,"sources":["C:\\Users\\lior\\FInal_PRO Intel\\IntelProject\\src\\app\\components\\modules\\modules.component.ts","C:\\Users\\lior\\FInal_PRO Intel\\IntelProject\\src\\app\\components\\modules\\modules.component.html"],"names":[],"mappings":";;AACA,SAAS,MAAT,QAAuB,uBAAvB;;;IAUa,gBAAgB,GAAA,MAAhB,gBAAgB,CAAA;AAI3B,EAAA,WAAA,CAAmB,WAAnB,EAA8C;AAA3B,SAAA,WAAA,GAAA,WAAA;AAFZ,SAAA,UAAA,GAAwB,EAAxB;AACA,SAAA,OAAA,GAAwB,EAAxB;AAC4C;;AAEnD,EAAA,QAAQ,GAAA;AACN,SAAK,qBAAL;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,KAAK,OAAjB;AACD;;AAEM,EAAA,qBAAqB,GAAA;AAAA;;AAAA;AAEzB,UAAI,KAAJ;;AACA,UAAI;AACF,QAAA,KAAI,CAAC,UAAL,SAAwB,KAAI,CAAC,WAAL,CAAiB,kBAAjB,EAAxB;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,GAAhB,CAAqB,CAAD,IAAM;AACxB,UAAA,KAAK,GAAC,CAAN;;AACA,UAAA,KAAI,CAAC,OAAL,CAAa,GAAb,CAAkB,CAAD,IAAM;AACrB,gBAAG,CAAC,CAAC,MAAF,IAAY,CAAC,CAAC,MAAjB,EACA;AACE,cAAA,KAAK;AACN;AACF,WALD;;AAMC,cAAG,KAAK,IAAI,CAAZ,EACD,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,IAAI,MAAJ,CAAW,CAAC,CAAC,MAAb,CAAlB;AACD,SAVD;AAWD,OAbD,CAcC,OAAO,GAAP,EAAiB;AAChB,QAAA,KAAK,CAAC,GAAG,CAAC,OAAL,CAAL;AACD;AAnBwB;AAoB1B;;AA/ByB,C;;;mBAAhB,gB,EAAgB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,aAAA,C;AAAA,C;;;QAAhB,gB;AAAgB,EAAA,SAAA,EAAA,CAAA,CAAA,aAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,yBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACX7B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,GAAA;AAAG,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,gBAAA;AAAc,MAAA,EAAA,CAAA,YAAA;;;;;ADWJ,gBAAgB,GAAA,UAAA,CAAA,CAR5B,UAAU,CAAC;AACV,EAAA,UAAU,EAAE;AADF,CAAD,CAQkB,CAAA,EAAhB,gBAAgB,CAAhB;SAAA,gB","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Module } from 'src/app/Models/Module';\nimport { ModuleService } from 'src/app/Services/ModuleService';\n@Injectable({\n  providedIn: 'root'\n})\n@Component({\n  selector: 'app-modules',\n  templateUrl: './modules.component.html',\n  styleUrls: ['./modules.component.css']\n})\nexport class ModulesComponent implements OnInit {\n\n  public Allmodules: Module [] = [];\n  public modules :   Module [] = [];\n  constructor(public Service_Mod : ModuleService) { }\n\n  ngOnInit(): void {\n    this.GetAllModulesDistnict();\n    console.log(this.modules);\n  }\n\n   async GetAllModulesDistnict()\n   {\n     let count:number;\n     try {\n       this.Allmodules = await this.Service_Mod.GetDataModelperMod();\n       this.Allmodules.map((x) =>{\n         count=0;\n         this.modules.map((y) =>{\n           if(x.module == y.module)\n           {\n             count++;\n           }           \n         });\n          if(count == 0)\n         this.modules.push(new Module(x.module));         \n       });\n     }\n      catch (err: any) {\n       alert(err.message);\n     }\n   }\n\n\n\n\n}\n","<p>modules works!</p>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}