{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/lior/FInal_PRO Intel/IntelProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Component, Injectable } from '@angular/core';\nimport { IfdeviationModel } from 'src/app/Models/IfdeviationModel';\nimport * as i0 from \"@angular/core\";\nexport class GaslistComponent {\n  constructor(s, route) {\n    this.s = s;\n    this.route = route;\n    this.GasListModel = [];\n    this.ShowTool = this.s.ToolChoice;\n    this.FailedGases = [];\n    this.FillArrayIf_devation = [];\n    this.CheckIf_deviation = false;\n    this.checkIfAc_define = false;\n    this.AlertIfdeviation = false;\n    this.AlertIfAllPassed = false;\n    this.divOpen = false;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this.GasListModel = yield _this.s.GetDataPerTool(_this.ShowTool);\n      } catch (ex) {\n        alert(ex.message);\n      }\n    })();\n  }\n\n  checkBox(val) {\n    const gas_line = val.target.value;\n    const Is_check = val.target.checked;\n    this.GasListModel.map(d => {\n      if (d.gasline == gas_line) {\n        d.Select = Is_check;\n\n        if (d.Select == false) {\n          d.status = undefined;\n          d.Ac = undefined;\n        }\n\n        return;\n      }\n\n      return;\n    });\n  }\n\n  checkValueAC(val, name) {\n    this.GasListModel.map(gas => {\n      if (val != undefined && gas.gasname == name) {\n        gas.Ac = val.target.value;\n\n        if (gas.Ac != undefined && gas.lower_limit != undefined && gas.upper_limit != undefined && gas.Select == true) {\n          if (gas.Ac >= gas.upper_limit * 1.03 || gas.Ac <= gas.lower_limit * 0.97 && gas.Ac > 0 && this.checkIfAc_define == true) {\n            gas.status = \"deviation update ENG\";\n          } else if (gas.Ac >= gas.lower_limit && gas.Ac <= gas.upper_limit && this.checkIfAc_define == true) {\n            gas.status = \"Passed\";\n          } else if (gas.Select == true && this.checkIfAc_define == false) {\n            gas.Ac = undefined;\n            gas.status = undefined;\n          } else if (gas.Ac < gas.lower_limit || gas.Ac > gas.upper_limit && gas.Ac > 0 && this.checkIfAc_define == true) {\n            gas.status = \"Failed\";\n            this.StatusValue = gas.status;\n          } else {\n            gas.status = undefined;\n          }\n        }\n      }\n    });\n  }\n\n  fun2() {\n    console.log(this.StatusValue);\n  }\n\n  CheckIf_Failed() {\n    this.CheckIf_deviation = false;\n    this.FailedGases = this.GasListModel.filter(x => {\n      return x.status == \"Failed\";\n    });\n  }\n\n  Filter() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let Check_FunArray = yield _this2.CheckIf_Failed();\n      _this2.FillArrayIf_devation = [];\n      let Select_Count = 0;\n      let Status_Passed_Count = 0;\n      let logic_Counter = 0;\n\n      _this2.GasListModel.map(gas => {\n        if (gas.Select == true) {\n          Select_Count++;\n          if (gas.status == \"Passed\") Status_Passed_Count++;\n\n          if (gas.status == \"deviation update ENG\") {\n            _this2.FillArrayIf_devation.push(new IfdeviationModel(gas.gasname));\n\n            _this2.CheckIf_deviation = true;\n          }\n\n          if (gas.Select == true && gas.status == undefined) logic_Counter++;\n        }\n      });\n\n      if (_this2.CheckIf_deviation == true) {\n        _this2.divOpen = true;\n        _this2.AlertIfAllPassed = false;\n        _this2.AlertIfdeviation = true;\n        return;\n      }\n\n      if (Select_Count == 0 || logic_Counter > 0) {\n        _this2.divOpen = false;\n        _this2.AlertIfAllPassed = false;\n        _this2.AlertIfdeviation = false;\n        return;\n      } else {\n        if (Select_Count == Status_Passed_Count) {\n          _this2.divOpen = true;\n          _this2.AlertIfdeviation = false;\n          _this2.AlertIfAllPassed = true;\n        } else {\n          _this2.AlertIfAllPassed = false;\n          _this2.AlertIfdeviation = false;\n          _this2.s.ReturnGasFailedArray = _this2.FailedGases;\n\n          _this2.route.navigateByUrl(\"/Gas-failed\");\n        }\n      }\n    })();\n  }\n\n  To_hideIFpassed() {\n    this.AlertIfdeviation = false;\n    this.AlertIfAllPassed = false;\n    this.divOpen = false;\n    this.route.navigateByUrl(\"/Home\");\n  }\n\n  checkIfInvalid(val) {\n    let check = val.target.value;\n\n    if (check.length == 0) {\n      this.checkIfAc_define = false;\n    } else this.checkIfAc_define = true;\n  }\n\n  To_hide() {\n    this.AlertIfdeviation = false;\n    this.AlertIfAllPassed = false;\n    this.divOpen = false;\n  }\n\n  Return_Back() {\n    this.route.navigateByUrl(\"/GAS-Adj\");\n  }\n\n}\nGaslistComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GaslistComponent,\n  factory: GaslistComponent.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\lior\\FInal_PRO Intel\\IntelProject\\src\\app\\components\\gaslist\\gaslist.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { style } from '@angular/animations';\nimport { FormStyle, NgSwitch, NgSwitchCase, NgSwitchDefault } from '@angular/common';\nimport { Component, Injectable, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { GasModel } from 'src/app/Models/Gas_model';\nimport { IfdeviationModel } from 'src/app/Models/IfdeviationModel';\nimport { ModuleService } from 'src/app/Services/ModuleService';\n\n@Component({\n  selector: 'app-gaslist',\n  templateUrl: './gaslist.component.html',\n  styleUrls: ['./gaslist.component.css']\n})\n@Injectable({\n  providedIn: 'root'\n})\nexport class GaslistComponent implements OnInit {\n\n  public GasListModel:            GasModel  [] = [];\n  public ShowTool:                any =     this.s.ToolChoice;\n  public FailedGases:             GasModel  [] = [];\n  public FillArrayIf_devation:    IfdeviationModel [] = [];\n  public CheckIf_deviation : boolean = false;\n  public SaveAcIf_define   : any;\n  public checkIfAc_define=false;\n  public AlertIfdeviation = false;\n  public AlertIfAllPassed = false;\n  public divOpen = false;\n  public StatusValue: any\n\n  constructor(public s: ModuleService, public route: Router) { }\n\n  async ngOnInit() {\n    try\n     {\n     this.GasListModel = await this.s.GetDataPerTool(this.ShowTool);\n     }\n    catch (ex: any)\n    {\n        alert(ex.message);\n    }\n }\n\n checkBox(val: any)\n { \n  const gas_line = val.target.value\n  const Is_check = val.target.checked\n\n  this.GasListModel.map((d) =>{\n      if(d.gasline == gas_line)\n      {\n        d.Select = Is_check\n        if(d.Select == false)\n        {\n          d.status=undefined;\n          d.Ac = undefined;\n        }\n        return;\n      }\n       return;\n  })\n}\n\ncheckValueAC(val: any, name: any)\n{\n    this.GasListModel.map((gas) =>{\n      if(val != undefined  && gas.gasname == name)\n      {\n        gas.Ac = val.target.value;\n\n        if(gas.Ac != undefined && gas.lower_limit != undefined && gas.upper_limit != undefined && gas.Select==true)\n        {\n\n           if(gas.Ac >= gas.upper_limit * 1.03 || gas.Ac <= gas.lower_limit * 0.97 && gas.Ac > 0 && this.checkIfAc_define == true)\n             {\n              gas.status = \"deviation update ENG\";  \n             } \n\n          else if(gas.Ac >= gas.lower_limit && gas.Ac <= gas.upper_limit && this.checkIfAc_define == true)\n          {\n             gas.status = \"Passed\";  \n                \n          }\n                  \n                  else if(gas.Select == true && this.checkIfAc_define == false)\n                  {\n                    gas.Ac     = undefined;\n                    gas.status = undefined;\n                  }\n\n            else if(gas.Ac < gas.lower_limit || gas.Ac > gas.upper_limit && gas.Ac>0  && this.checkIfAc_define == true )\n                  {\n                    gas.status = \"Failed\"; \n                    this.StatusValue = gas.status;\n                    \n                  }   \n                                     \n           else\n           {\n             gas.status = undefined;\n           \n           }\n        }\n      }\n    });\n}\n\nfun2()\n{\n  console.log(this.StatusValue);\n}\n\nCheckIf_Failed()\n{\n  this.CheckIf_deviation = false;\n  this.FailedGases = this.GasListModel.filter((x) => {\n    return x.status == \"Failed\";\n  });\n}\n\nasync Filter()\n{\n  let Check_FunArray = await this.CheckIf_Failed();\n    this.FillArrayIf_devation  = [];\n    let Select_Count           = 0;\n    let Status_Passed_Count    = 0;\n    let logic_Counter          = 0;\n\n    this.GasListModel.map((gas) => {\n      if(gas.Select == true)\n      {\n        Select_Count++;\n\n        if(gas.status == \"Passed\")\n            Status_Passed_Count++;\n\n        if(gas.status == \"deviation update ENG\")\n        {\n          this.FillArrayIf_devation.push (new IfdeviationModel(gas.gasname))\n          this.CheckIf_deviation = true;\n        }\n\n        if(gas.Select == true && gas.status == undefined)\n        logic_Counter++;\n      }       \n    });\n\n    if(this.CheckIf_deviation == true)\n    {\n      this.divOpen = true;\n      this.AlertIfAllPassed = false;\n      this.AlertIfdeviation = true;\n      return;\n    }\n\n    if(Select_Count==0 || logic_Counter > 0)\n    {\n      this.divOpen = false\n      this.AlertIfAllPassed = false;\n      this.AlertIfdeviation = false;\n      return;\n    } \n     \n    else\n    {\n      if(Select_Count == Status_Passed_Count)\n      {\n        this.divOpen = true;\n        this.AlertIfdeviation = false;\n        this.AlertIfAllPassed = true;\n      }\n  \n      else\n      {\n         this.AlertIfAllPassed = false;\n         this.AlertIfdeviation = false;\n         this.s.ReturnGasFailedArray=this.FailedGases;\n         this.route.navigateByUrl(\"/Gas-failed\");\n      }\n    }\n \n}\n\nTo_hideIFpassed()\n{\n  this.AlertIfdeviation=false;\n  this.AlertIfAllPassed = false;\n  this.divOpen = false;\n  this.route.navigateByUrl(\"/Home\")\n}\n\ncheckIfInvalid(val: any)\n{\n  let check = val.target.value\n  if(check.length == 0)\n  {\n    this.checkIfAc_define = false;  \n  }\n\n  else\n  this.checkIfAc_define = true;\n}\n\nTo_hide()\n{\n  this.AlertIfdeviation=false;\n  this.AlertIfAllPassed = false;\n  this.divOpen = false;\n}\n\nReturn_Back()\n{\n   this.route.navigateByUrl(\"/GAS-Adj\");\n}\n\n\n\n\n\n\n }\n\n\n  \n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}